// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // #DEBUG : comment the directUrl for development in windows or running in local
  directUrl = env("DIRECT_URL")
}

model User {
  id                     String     @id @default(uuid())
  email                  String     @unique
  username               String     @unique
  firstName              String
  lastName               String
  password               String?
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt
  roles                  Role[]     @default([USER])
  description            String?
  previousWorkplaceId    String[]
  previousWorkplaceCount Int?
  ratings                Rating[]
  cv                     String?
  companyId              String?
  portfolio              String[]   @map("portfolio")
  profilePicture         String?
  hasGoogleAccount       Boolean    @default(false)
  company                Company?   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  contract               Contract[]
}

model JobVacancy {
  id          String     @id @default(uuid())
  title       String
  description String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  // company Id is optional for current development purposes
  company     Company?   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId   String?
  contracts   Contract[]
}

model Company {
  id             String       @id @default(uuid())
  profilePicture String?
  name           String
  description    String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  jobs           JobVacancy[]
  user           User[]
}

model Contract {
  id             String         @id @default(uuid())
  userId         String
  jobId          String
  paymentId      String?
  title          String
  description    String
  paymentRate    Int?
  template       String?        @db.VarChar()
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  status         ContractStatus @default(PENDING)
  customField    String?
  workSubmission String?
  ratingId       String?
  jobVacancy     JobVacancy?    @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user           User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  payment        Payment?       @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  rating         Rating?        @relation(fields: [ratingId], references: [id], onDelete: Cascade)
}

model Payment {
  id               String         @id @default(uuid())
  paymentRequestId String?
  paymentStatus    PaymentStatus? @default(PENDING)
  payoutLinkId     String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  Contract         Contract[]
}

model Rating {
  id              String     @id @default(uuid())
  User            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  recruiterUserId String
  ratingOf10      Int
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  Contract        Contract[]
}

enum Role {
  ADMIN
  USER
  RECRUITER
}

enum ContractStatus {
  PENDING //default & menunggu konfirmasi recruiter
  ACCEPTED //diterima recruiter tapi kontrak bleum deal
  REJECTED //ditolak recruiter
  ONGOING //kontrak sudah deal (kl kontrak yg di tawarin recuiter di acc sama freelancer)
  COMPLETED // recruiter udah bayar (payment status = paid)
}

enum PaymentStatus {
  PENDING //default
  PAID //dibayar recruiter
  ACCEPTED //diterima freelancer (guard biar paid out 2 kali)
}
