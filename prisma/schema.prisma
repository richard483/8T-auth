// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // #DEBUG : comment the directUrl for development in windows or running in local
  directUrl = env("DIRECT_URL")
}

model User {
  id                     String     @id @default(uuid())
  email                  String     @unique
  username               String?
  firstName              String
  lastName               String
  password               String?
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt
  roles                  Role[]     @default([USER])
  description            String?
  previousWorkplaceId    String[]
  previousWorkplaceCount Int?
  ratings                Rating[]
  ratingsAvg             Float?
  companyId              String?
  hasGoogleAccount       Boolean    @default(false)
  company                Company?   @relation(fields: [companyId], references: [id])
  Contract               Contract[]
}

model JobVacancy {
  id          String     @id @default(uuid())
  title       String
  description String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  // company Id is optional for current development purposes
  company     Company?   @relation(fields: [companyId], references: [id])
  companyId   String?
  contracts   Contract[]
}

model Company {
  id          String       @id @default(uuid())
  name        String
  description String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  jobs        JobVacancy[]
  User        User[]
}

model Contract {
  id               String         @id @default(uuid())
  userId           String
  jobId            String
  title            String
  description      String
  template         String         @db.VarChar()
  paymentRate      Int
  paymentRequestId String?
  paymentStatus    PaymentStatus?
  payoutLinkId     String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  status           ContractStatus @default(PENDING)
  JobVacancy       JobVacancy?    @relation(fields: [jobId], references: [id])
  User             User?          @relation(fields: [userId], references: [id])
}

model Rating {
  id            String @id @default(uuid())
  User          User   @relation(fields: [userId], references: [id])
  userId        String
  givenByUserId String
  ratingOf10    Int
}

enum Role {
  ADMIN
  USER
  RECRUITER
}

enum ContractStatus {
  PENDING
  ONGOING
  ACCEPTED
  REJECTED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}
